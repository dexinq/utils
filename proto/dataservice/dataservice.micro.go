// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/dataservice/dataservice.proto

package dataservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	controller "proto/controller"
	global "proto/global"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DataService service

type DataService interface {
	DataServe(ctx context.Context, in *DataAcquire, opts ...client.CallOption) (*Response, error)
}

type dataService struct {
	c    client.Client
	name string
}

func NewDataService(name string, c client.Client) DataService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dataservice"
	}
	return &dataService{
		c:    c,
		name: name,
	}
}

func (c *dataService) DataServe(ctx context.Context, in *DataAcquire, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DataService.DataServe", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataService service

type DataServiceHandler interface {
	DataServe(context.Context, *DataAcquire, *Response) error
}

func RegisterDataServiceHandler(s server.Server, hdlr DataServiceHandler, opts ...server.HandlerOption) error {
	type dataService interface {
		DataServe(ctx context.Context, in *DataAcquire, out *Response) error
	}
	type DataService struct {
		dataService
	}
	h := &dataServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DataService{h}, opts...))
}

type dataServiceHandler struct {
	DataServiceHandler
}

func (h *dataServiceHandler) DataServe(ctx context.Context, in *DataAcquire, out *Response) error {
	return h.DataServiceHandler.DataServe(ctx, in, out)
}

// Client API for ControllerService service

type ControllerService interface {
	GetController(ctx context.Context, in *global.Empty, opts ...client.CallOption) (*controller.ControllerList, error)
	AddController(ctx context.Context, in *controller.ControllerObj, opts ...client.CallOption) (*global.Response, error)
	UpdateController(ctx context.Context, in *controller.ControllerObj, opts ...client.CallOption) (*global.Response, error)
}

type controllerService struct {
	c    client.Client
	name string
}

func NewControllerService(name string, c client.Client) ControllerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dataservice"
	}
	return &controllerService{
		c:    c,
		name: name,
	}
}

func (c *controllerService) GetController(ctx context.Context, in *global.Empty, opts ...client.CallOption) (*controller.ControllerList, error) {
	req := c.c.NewRequest(c.name, "ControllerService.GetController", in)
	out := new(controller.ControllerList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerService) AddController(ctx context.Context, in *controller.ControllerObj, opts ...client.CallOption) (*global.Response, error) {
	req := c.c.NewRequest(c.name, "ControllerService.AddController", in)
	out := new(global.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerService) UpdateController(ctx context.Context, in *controller.ControllerObj, opts ...client.CallOption) (*global.Response, error) {
	req := c.c.NewRequest(c.name, "ControllerService.UpdateController", in)
	out := new(global.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ControllerService service

type ControllerServiceHandler interface {
	GetController(context.Context, *global.Empty, *controller.ControllerList) error
	AddController(context.Context, *controller.ControllerObj, *global.Response) error
	UpdateController(context.Context, *controller.ControllerObj, *global.Response) error
}

func RegisterControllerServiceHandler(s server.Server, hdlr ControllerServiceHandler, opts ...server.HandlerOption) error {
	type controllerService interface {
		GetController(ctx context.Context, in *global.Empty, out *controller.ControllerList) error
		AddController(ctx context.Context, in *controller.ControllerObj, out *global.Response) error
		UpdateController(ctx context.Context, in *controller.ControllerObj, out *global.Response) error
	}
	type ControllerService struct {
		controllerService
	}
	h := &controllerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ControllerService{h}, opts...))
}

type controllerServiceHandler struct {
	ControllerServiceHandler
}

func (h *controllerServiceHandler) GetController(ctx context.Context, in *global.Empty, out *controller.ControllerList) error {
	return h.ControllerServiceHandler.GetController(ctx, in, out)
}

func (h *controllerServiceHandler) AddController(ctx context.Context, in *controller.ControllerObj, out *global.Response) error {
	return h.ControllerServiceHandler.AddController(ctx, in, out)
}

func (h *controllerServiceHandler) UpdateController(ctx context.Context, in *controller.ControllerObj, out *global.Response) error {
	return h.ControllerServiceHandler.UpdateController(ctx, in, out)
}
